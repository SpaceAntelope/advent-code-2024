#load "../global.fsx"

open System
open System.IO

let parse path = path |> File.ReadAllLines |> Array.map int64

let inline prune sn = sn % 16777216L
let inline mix (sn: int64) (sn': int64) = sn ^^^ sn'

let calc (sn: int64) = 
    let mutable result = sn * 64L
    result <- result ^^^ sn
    result <- prune result
    result <- result ^^^ (result / 32L)
    result <- prune result
    result <- result ^^^ (result * 2048L)
    result <- prune result
    result    


let fromSecret (init: int64) =
    seq {
        let mutable secretNumber = init
        while true do 
            secretNumber <- calc secretNumber
            yield secretNumber
    }


fromSecret 123L 
|> Seq.take 10
|> Global.seqShouldBe [ 
    15887950L
    16495136L
    527345L
    704524L
    1553684L
    12683156L
    11100544L
    12249484L
    7753432L
    5908254L
]

[1;10;100;2024] 
|> List.map (fun x -> 
    fromSecret x 
    |> Seq.skip 1999 
    |> Seq.head)
|> Global.seqShouldBe [
    8685429
    4700978
    15273692
    8667524
]

"./input.example"
|> parse
|> Array.sumBy (fun x -> 
    fromSecret x 
    |> Seq.skip 1999 
    |> Seq.head)
|> Global.shouldBe 37327623

"./input.actual"
|> parse
|> Array.sumBy (fun x -> 
    fromSecret x 
    |> Seq.skip 1999 
    |> Seq.head)
|> printfn "The sum of the 2000th secret number generated by each buyer is %d"   